import time
import torch
import openpyxl
import numpy as np
from pathlib import Path
from backbones import get_model
from face_alignment import align
from torchvision import transforms

# Add path to the dataset folder
dataset_path = ""

# generate embeddings for a face image
def generateEmbedding(img, model, transform):

    result = {
        "status": False,
        "message": "Error occurred in embedding generation",
        "embedding": None
    }

    try:
        aligned = align.get_aligned_face(img)
        transformed_input = transform(aligned).unsqueeze(0)
        embedding = model(transformed_input)

        result["status"] = True
        result["message"] = "Embedding generated successfully"
        result["embedding"] = embedding

    except Exception as e:
        result["message"] = str(e)

    return result

# find distance between 2 face embeddings
def findDistance(embedding1_obj, embedding2_obj):

    result = {
        "status": False,
        "message": "Error occurred in distance calculation",
        "distance": -1
    }

    if embedding1_obj["embedding"] is None or embedding2_obj["embedding"] is None:
        result["message"] = embedding1_obj["message"]
        result["message"] += embedding2_obj["message"]
    else:
        embedding1 = embedding1_obj["embedding"].detach().numpy()
        embedding2 = embedding2_obj["embedding"].detach().numpy()
        diff = np.subtract(embedding1, embedding2)
        dist = np.sum(np.square(diff), 1)
        result["status"] = True
        result["message"] = "Distance calculated successfully"
        result["distance"] = dist[0]

    return result

# generate face embeddings for each face and find the distance between each face embedding pair
def main(model_sheet, summary_sheet, images_path_list, model_name, transform, verification_model, model_base_col, summary_row):

    dataset_embeddings = {}
    count = 1
    model_row = 3

    model_cell = summary_sheet.cell(row = summary_row, column = 1)
    model_cell.value = model_name

    embedding_start_time = time.perf_counter()

    for path in images_path_list:
        result = generateEmbedding(path, verification_model, transform)
        key = path.replace(f"{dataset_path}/", "")
        dataset_embeddings[key] = result

        print(f"Embedding generated for {key}")

    dataset_embeddings_keys = dataset_embeddings.keys()

    embedding_end_time = time.perf_counter()

    print(f"All embeddings generated by {model_name} in {embedding_end_time - embedding_start_time}s")
    embeddings_time_cell = summary_sheet.cell(row = summary_row, column = 3)
    embeddings_time_cell.value = embedding_end_time - embedding_start_time

    comparison_start_time = time.perf_counter()

    # Run loop to perform face verification on each pair
    for probe_path in dataset_embeddings_keys:
        for gallery_path in dataset_embeddings_keys:

            result = findDistance(dataset_embeddings[probe_path], dataset_embeddings[gallery_path])
            count_cell = model_sheet.cell(row = model_row, column = 1)
            probe_path_cell = model_sheet.cell(row = model_row, column = 2)
            gallery_path_cell = model_sheet.cell(row = model_row, column = 3)
            match_cell = model_sheet.cell(row = model_row, column = model_base_col)
            distance_cell = model_sheet.cell(row = model_row, column = model_base_col + 1)
            status_cell = model_sheet.cell(row = model_row, column = model_base_col + 2)

            count_cell.value = count
            probe_path_cell.value = probe_path
            gallery_path_cell.value = gallery_path
            match_cell.value = result["message"]
            distance_cell.value = result["distance"]
            status_cell.value = result["status"]

            print(f"{probe_path} vs {gallery_path} comparison completed")

            model_row += 1
            count += 1

    comparison_end_time = time.perf_counter()

    print(f"All comparisons with {model_name} completed in {comparison_end_time - comparison_start_time}s")
    comparison_time_cell = summary_sheet.cell(row = summary_row, column = 4)
    comparison_time_cell.value = comparison_end_time - comparison_start_time

if __name__ == "__main__":

    # Initialize variables and load excel workbook
    workbook_path = "./EdgeFace IFD Results.xlsx"
    workbook_obj = openpyxl.load_workbook(workbook_path)
    model_sheet = workbook_obj["EdgeFace"]
    summary_sheet = workbook_obj["Summary"]
    model_base_col = 4
    summary_row = 2

    arch_list = ["edgeface_base", "edgeface_s_gamma_05", "edgeface_xs_gamma_06", "edgeface_xs_q", "edgeface_xxs_q", "edgeface_xxs"]
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5]),
    ])

    # Fetch list of all face image paths in dataset
    images_path_list = [str(file).replace("\\", "/") for file in Path(dataset_path).rglob("*") if file.is_file()]
    
    for arch in arch_list:
        
        # Load model
        model = get_model(arch)
        checkpoint_path = f'checkpoints/{arch}.pt'
        model.load_state_dict(torch.load(checkpoint_path, map_location = 'cpu'))
        model.eval()
        
        print(f"---{arch} evaluation started---")
        main(model_sheet, summary_sheet, images_path_list, arch, transform, model, model_base_col, summary_row)
        print(f"---{arch} evaluation ended---")
        model_base_col += 3
        summary_row += 1

    workbook_obj.save("./EdgeFace IFD Results.xlsx")